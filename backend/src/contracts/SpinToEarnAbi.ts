/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface SpinToEarnAbiInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "buyTickets"
      | "getPoints"
      | "owner"
      | "pointsBalance"
      | "setPoints"
      | "ticketPrice"
      | "ticketsBalance"
      | "withdrawFunds"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "PointsAssigned"
      | "RewardClaimed"
      | "TicketsPurchased"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "buyTickets",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getPoints", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pointsBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoints",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "ticketPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ticketsBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "buyTickets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPoints", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pointsBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPoints", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ticketPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ticketsBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
}

export namespace PointsAssignedEvent {
  export type InputTuple = [user: AddressLike, points: BigNumberish];
  export type OutputTuple = [user: string, points: bigint];
  export interface OutputObject {
    user: string;
    points: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardClaimedEvent {
  export type InputTuple = [
    user: AddressLike,
    points: BigNumberish,
    reward: BigNumberish
  ];
  export type OutputTuple = [user: string, points: bigint, reward: bigint];
  export interface OutputObject {
    user: string;
    points: bigint;
    reward: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TicketsPurchasedEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SpinToEarnAbi extends BaseContract {
  connect(runner?: ContractRunner | null): SpinToEarnAbi;
  waitForDeployment(): Promise<this>;

  interface: SpinToEarnAbiInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  buyTickets: TypedContractMethod<[], [void], "payable">;

  getPoints: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pointsBalance: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  setPoints: TypedContractMethod<
    [users: AddressLike[], points: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  ticketPrice: TypedContractMethod<[], [bigint], "view">;

  ticketsBalance: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  withdrawFunds: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "buyTickets"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "getPoints"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pointsBalance"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "setPoints"
  ): TypedContractMethod<
    [users: AddressLike[], points: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "ticketPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ticketsBalance"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawFunds"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "PointsAssigned"
  ): TypedContractEvent<
    PointsAssignedEvent.InputTuple,
    PointsAssignedEvent.OutputTuple,
    PointsAssignedEvent.OutputObject
  >;
  getEvent(
    key: "RewardClaimed"
  ): TypedContractEvent<
    RewardClaimedEvent.InputTuple,
    RewardClaimedEvent.OutputTuple,
    RewardClaimedEvent.OutputObject
  >;
  getEvent(
    key: "TicketsPurchased"
  ): TypedContractEvent<
    TicketsPurchasedEvent.InputTuple,
    TicketsPurchasedEvent.OutputTuple,
    TicketsPurchasedEvent.OutputObject
  >;

  filters: {
    "PointsAssigned(address,uint256)": TypedContractEvent<
      PointsAssignedEvent.InputTuple,
      PointsAssignedEvent.OutputTuple,
      PointsAssignedEvent.OutputObject
    >;
    PointsAssigned: TypedContractEvent<
      PointsAssignedEvent.InputTuple,
      PointsAssignedEvent.OutputTuple,
      PointsAssignedEvent.OutputObject
    >;

    "RewardClaimed(address,uint256,uint256)": TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;
    RewardClaimed: TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;

    "TicketsPurchased(address,uint256)": TypedContractEvent<
      TicketsPurchasedEvent.InputTuple,
      TicketsPurchasedEvent.OutputTuple,
      TicketsPurchasedEvent.OutputObject
    >;
    TicketsPurchased: TypedContractEvent<
      TicketsPurchasedEvent.InputTuple,
      TicketsPurchasedEvent.OutputTuple,
      TicketsPurchasedEvent.OutputObject
    >;
  };
}
